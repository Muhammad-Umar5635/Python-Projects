[
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "madlibs",
        "kind": 2,
        "importPath": "01_madlibs",
        "description": "01_madlibs",
        "peekOfCode": "def madlibs():\n    Adjective = input(\"Enter an Adjective: \")\n    Verb = input(\"Enter a Verb: \")\n    Noun = input(\"Enter a Noun: \")\n    Adjective2 = input(\"Enter another Adjective: \")\n    Noun2 = input(\"Enter another Noun: \")\n    Story = f\"One sunny day, a {Adjective} squirrel decided to {Verb} up the tallest {Noun} \\\nin the forest. As it climbed, it noticed a {Adjective2} cloud shaped like a {Noun2} \\\nthat was floating in the sky. The squirrel couldn’t believe its eyes and started \\\nto chattering excitedly. Suddenly, a gust of wind blew, and the squirrel had to hold \\",
        "detail": "01_madlibs",
        "documentation": {}
    },
    {
        "label": "play",
        "kind": 2,
        "importPath": "02_guess_the_number_computer",
        "description": "02_guess_the_number_computer",
        "peekOfCode": "def play():\n    count = 0\n    my_number = random.randint(1, 99)\n    while True:\n        try:\n            guess = int(input(\"I am thinking a number between 0 and 99... Enter a guess: \"))\n            break\n        except ValueError:\n            print(\"Enter a valid number\")\n            continue",
        "detail": "02_guess_the_number_computer",
        "documentation": {}
    },
    {
        "label": "play",
        "kind": 2,
        "importPath": "03_guess_the number_user",
        "description": "03_guess_the number_user",
        "peekOfCode": "def play():\n    count = 0\n    while True:\n        try:\n            user_number = int(input(\"Enter a number b/w 1 and 100: \"))\n            if user_number < 1 or user_number > 100:\n                print(\"Enter a number between 1 and 100\")\n                continue\n            break\n        except ValueError:",
        "detail": "03_guess_the number_user",
        "documentation": {}
    },
    {
        "label": "play",
        "kind": 2,
        "importPath": "04_rock_paper_scissors",
        "description": "04_rock_paper_scissors",
        "peekOfCode": "def play():\n    import random\n    Computer_guess=random.choice([\"r\",\"p\",\"s\"])\n    while True:\n        user_choice=input(\"Enter your choice \\\"r\\\" for rock, \\\"p\\\" for paper and \\\"s\\\" for scissor: \")\n        if user_choice not in [\"r\",\"p\",\"s\"]:\n            print(\"Enter a valid choice\")\n            continue\n        if user_choice==Computer_guess:\n            print(\"Tie! Both chose: \",user_choice)",
        "detail": "04_rock_paper_scissors",
        "documentation": {}
    },
    {
        "label": "hangman_game",
        "kind": 2,
        "importPath": "05_hangman",
        "description": "05_hangman",
        "peekOfCode": "def hangman_game():\n    words = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"honeydew\", \"kiwi\", \"lemon\", \"mango\",\n             \"nectarine\", \"orange\", \"peach\", \"quince\", \"raspberry\", \"strawberry\", \"tangerine\", \"watermelon\", \"yuzu\"]\n    word = random.choice(words)  # Select a random word\n    guessed_letters = []\n    attempts = 6  # Number of attempts\n    while attempts > 0:\n        # Display the word with guessed letters\n        display_word = \" \".join([letter if letter in guessed_letters else \"_\" for letter in word])\n        print(\"\\nGuess the word:\", display_word)",
        "detail": "05_hangman",
        "documentation": {}
    },
    {
        "label": "countdown",
        "kind": 2,
        "importPath": "06_Countdown_timer",
        "description": "06_Countdown_timer",
        "peekOfCode": "def countdown():\n    while True:\n        try:\n            user_input = int(input(\"Enter the countdown time in seconds: \"))\n            if user_input <= 0:\n                print(\"⚠️ Please enter a positive number!\")\n                continue\n            break\n        except ValueError:\n            print(\"⚠️ Invalid input! Please enter a valid number.\")",
        "detail": "06_Countdown_timer",
        "documentation": {}
    },
    {
        "label": "password_generator",
        "kind": 2,
        "importPath": "07_Password_Generator",
        "description": "07_Password_Generator",
        "peekOfCode": "def password_generator():\n    while True:\n        try:\n            passwords = int(input(\"Enter the number of passwords you want to generate: \"))\n            if passwords <= 0:\n                print(\"Please enter a positive number!\")\n                continue\n            length = int(input(\"Enter the length of each password: \"))\n            if length <= 0:\n                print(\"Password length must be greater than 0!\")",
        "detail": "07_Password_Generator",
        "documentation": {}
    },
    {
        "label": "height",
        "kind": 5,
        "importPath": "08_BMI_Calculator",
        "description": "08_BMI_Calculator",
        "peekOfCode": "height = st.slider(\"Enter your height (cm)\", min_value=50, max_value=300, value=170)\nweight = st.slider(\"Enter your weight (kg)\", min_value=10, max_value=300, value=70)\n# Button to calculate BMI\nif st.button(\"Calculate BMI\"):\n    if height == 0:  # Prevent division by zero\n        st.error(\"⚠️ Height cannot be zero! Please enter a valid height.\")\n    elif weight == 0:\n        st.error(\"⚠️ Weight cannot be zero! Please enter a valid weight.\")\n    else:\n        bmi = weight / ((height / 100) ** 2)",
        "detail": "08_BMI_Calculator",
        "documentation": {}
    },
    {
        "label": "weight",
        "kind": 5,
        "importPath": "08_BMI_Calculator",
        "description": "08_BMI_Calculator",
        "peekOfCode": "weight = st.slider(\"Enter your weight (kg)\", min_value=10, max_value=300, value=70)\n# Button to calculate BMI\nif st.button(\"Calculate BMI\"):\n    if height == 0:  # Prevent division by zero\n        st.error(\"⚠️ Height cannot be zero! Please enter a valid height.\")\n    elif weight == 0:\n        st.error(\"⚠️ Weight cannot be zero! Please enter a valid weight.\")\n    else:\n        bmi = weight / ((height / 100) ** 2)\n        st.success(f\"📊 Your BMI is: **{bmi:.2f}**\")",
        "detail": "08_BMI_Calculator",
        "documentation": {}
    },
    {
        "label": "uploaded_file",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "uploaded_file = st.file_uploader(\"Choose a CSV file\", type=\"csv\")\nif uploaded_file is not None:\n    df = pd.read_csv(uploaded_file)\n    st.subheader(\"Data Preview\")\n    st.write(df.head())\n    st.subheader(\"Data Summary\")\n    st.write(df.describe())\n    st.subheader(\"Filter Data\")\n    columns = df.columns.tolist()\n    selected_column = st.selectbox(\"Select column to filter by\", columns)",
        "detail": "main",
        "documentation": {}
    }
]