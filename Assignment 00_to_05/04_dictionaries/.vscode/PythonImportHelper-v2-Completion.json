[
    {
        "label": "sha256",
        "importPath": "hashlib",
        "description": "hashlib",
        "isExtraImport": true,
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "00_count_nums",
        "description": "00_count_nums",
        "peekOfCode": "def main():\n    memory = {}\n    while True:\n        user_input = input(\"Enter a number or enter nothing to stop: \")\n        if user_input == \"\":\n            break\n        if user_input in memory:\n            memory[user_input] += 1\n        else:\n            memory[user_input] = 1",
        "detail": "00_count_nums",
        "documentation": {}
    },
    {
        "label": "read_phone_numbers",
        "kind": 2,
        "importPath": "01_phone_books",
        "description": "01_phone_books",
        "peekOfCode": "def read_phone_numbers():\n    phonebook = {}  # Create empty phonebook\n    while True:\n        name = input(\"Enter a Name to add: \")\n        if name == \"\":\n            break\n        number = input(\"Enter a Number to add: \")\n        phonebook[name.lower()] = number\n    return phonebook\ndef print_phonebook(phonebook):",
        "detail": "01_phone_books",
        "documentation": {}
    },
    {
        "label": "print_phonebook",
        "kind": 2,
        "importPath": "01_phone_books",
        "description": "01_phone_books",
        "peekOfCode": "def print_phonebook(phonebook):\n    for name in phonebook:\n        print(str(name) + \" -> \" + str(phonebook[name]))\ndef lookup_numbers(phonebook):\n    while True:\n        name = input(\"Enter name to lookup: \")\n        if name == \"\":\n            break\n        if name.lower() not in phonebook:\n            print(name + \" is not in the phonebook\")",
        "detail": "01_phone_books",
        "documentation": {}
    },
    {
        "label": "lookup_numbers",
        "kind": 2,
        "importPath": "01_phone_books",
        "description": "01_phone_books",
        "peekOfCode": "def lookup_numbers(phonebook):\n    while True:\n        name = input(\"Enter name to lookup: \")\n        if name == \"\":\n            break\n        if name.lower() not in phonebook:\n            print(name + \" is not in the phonebook\")\n        else:\n            print(phonebook[name])\ndef main():",
        "detail": "01_phone_books",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "01_phone_books",
        "description": "01_phone_books",
        "peekOfCode": "def main():\n    phonebook = read_phone_numbers()\n    print_phonebook(phonebook)\n    lookup_numbers(phonebook)\n# Python boilerplate.\nif __name__ == \"__main__\":\n    main()",
        "detail": "01_phone_books",
        "documentation": {}
    },
    {
        "label": "menu",
        "kind": 5,
        "importPath": "02_pop_up_shop",
        "description": "02_pop_up_shop",
        "peekOfCode": "menu = {\n    'B': ('Burger', 200),\n    'F': ('French Fries', 50),\n    'P': ('Pizza', 500),\n    'S': ('Sandwiches', 150)\n}\n# Initialize the total charge\ntotal_charge = 0\n# Display the menu\nprint(\"Menu:\")",
        "detail": "02_pop_up_shop",
        "documentation": {}
    },
    {
        "label": "total_charge",
        "kind": 5,
        "importPath": "02_pop_up_shop",
        "description": "02_pop_up_shop",
        "peekOfCode": "total_charge = 0\n# Display the menu\nprint(\"Menu:\")\nfor item_code, (item_name, price) in menu.items():\n    print(f\"{item_code} - {item_name} (Rs. {price})\")\n# Take orders from the customer\nwhile True:\n    food_type = input(\"Enter the food type (B/F/P/S) or 'Q' to quit: \").upper()\n    # Check if the customer wants to quit\n    if food_type == 'Q':",
        "detail": "02_pop_up_shop",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "03_powerful_passwords",
        "description": "03_powerful_passwords",
        "peekOfCode": "def login(email, stored_logins, password_to_check):\n    \"\"\"\n    Returns True if the hash of the password we are checking matches the one in stored_logins\n    for a specific email. Otherwise, returns False.\n    email: the email we are checking the password for\n    stored_logins: a dictionary pointing from an email to its hashed password\n    password_to_check: a password we want to test alongside the email to login with\n    \"\"\"\n    if stored_logins[email] == hash_password(password_to_check):\n        return True",
        "detail": "03_powerful_passwords",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "kind": 2,
        "importPath": "03_powerful_passwords",
        "description": "03_powerful_passwords",
        "peekOfCode": "def hash_password(password):\n    \"\"\"\n    Takes in a password and returns the SHA256 hashed value for that specific password.\n    Inputs:\n        password: the password we want\n    Outputs:\n        the hashed form of the input password\n    \"\"\"\n    return sha256(password.encode()).hexdigest()\ndef main():",
        "detail": "03_powerful_passwords",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "03_powerful_passwords",
        "description": "03_powerful_passwords",
        "peekOfCode": "def main():\n    # stored_logins is a dictionary with emails as keys and hashed passwords as values\n    stored_logins = {\n        \"example@gmail.com\": \"5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8\",\n        \"code_in_placer@cip.org\": \"973607a4ae7b4cf7d96a100b0fb07e8519cc4f70441d41214a9f811577bb06cc\",\n        \"student@stanford.edu\": \"882c6df720fd99f5eebb1581a1cf975625cea8a160283011c0b9512bb56c95fb\"\n    }\n    print(login(\"example@gmail.com\", stored_logins, \"word\"))\n    print(login(\"example@gmail.com\", stored_logins, \"password\"))\n    print(login(\"code_in_placer@cip.org\", stored_logins, \"Karel\"))",
        "detail": "03_powerful_passwords",
        "documentation": {}
    }
]