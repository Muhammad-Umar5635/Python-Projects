[
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "sha256",
        "importPath": "hashlib",
        "description": "hashlib",
        "isExtraImport": true,
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.00_intro_python.01_add_two_numbers",
        "description": "Assignment 00_to_05.00_intro_python.01_add_two_numbers",
        "peekOfCode": "def main():\n    # Prompt the user to enter two numbers\n    while True:\n        # Try to convert the input to an integer\n        try:\n            num_1 = int(input(\"Enter first number: \"))\n            break\n        except ValueError:\n            print(\"Invalid input. Please enter a valid number.\")\n            continue",
        "detail": "Assignment 00_to_05.00_intro_python.01_add_two_numbers",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.00_intro_python.02_agreement_bot",
        "description": "Assignment 00_to_05.00_intro_python.02_agreement_bot",
        "peekOfCode": "def main():\n    Animal_Name = str(input(\"What's your Favorite Animal name? \"))\n    print(f\"My Favorite Animal name is also {Animal_Name}!\")\nif __name__ == \"__main__\":\n    main()",
        "detail": "Assignment 00_to_05.00_intro_python.02_agreement_bot",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.00_intro_python.03_fahrenheit_to_celsius",
        "description": "Assignment 00_to_05.00_intro_python.03_fahrenheit_to_celsius",
        "peekOfCode": "def main():\n    while True:\n        try:\n            fahrenheit = float(input(\"Enter the temperature in Fahrenheit: \"))\n            break\n        except ValueError:\n            print(\"Invalid input. Please enter a valid number.\")\n            continue\n    celsius = (fahrenheit - 32) * 5/9\n    print(f\"{fahrenheit} degrees Fahrenheit is equal to {celsius:.2f} degrees Celsius.\")",
        "detail": "Assignment 00_to_05.00_intro_python.03_fahrenheit_to_celsius",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.00_intro_python.04_how_old_are_they",
        "description": "Assignment 00_to_05.00_intro_python.04_how_old_are_they",
        "peekOfCode": "def main():\n    while True:\n        try:\n            anton = int(input(\"Enter Anton's age: \"))\n            if anton <=0:\n                print(\"Age never be Negative or Zero.\")\n                continue\n            break\n        except ValueError:\n            print(\"Invalid input. Please enter a valid number.\")",
        "detail": "Assignment 00_to_05.00_intro_python.04_how_old_are_they",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.00_intro_python.05_triangle_perimeter",
        "description": "Assignment 00_to_05.00_intro_python.05_triangle_perimeter",
        "peekOfCode": "def main():\n    # Get the 3 side lengths of the triangle\n    while True:\n        try:\n            side1: float = float(input(\"What is the length of side 1? \"))\n            break\n        except ValueError:\n            print(\"Invalid input. Please enter a valid number.\")\n            continue\n    while True:",
        "detail": "Assignment 00_to_05.00_intro_python.05_triangle_perimeter",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.00_intro_python.06_square_number",
        "description": "Assignment 00_to_05.00_intro_python.06_square_number",
        "peekOfCode": "def main():\n    while True:\n        try:\n            # Make sure to cast the input to a float so we can do math with it!\n            num: float = float(input(\"Enter a number to see its square: \")) \n            break\n        except ValueError:\n            print(\"Invalid input. Please enter a valid number.\")\n            continue\n    # Print out the square",
        "detail": "Assignment 00_to_05.00_intro_python.06_square_number",
        "documentation": {}
    },
    {
        "label": "roll_dice",
        "kind": 2,
        "importPath": "Assignment 00_to_05.01_expressions.01_dicesimulator",
        "description": "Assignment 00_to_05.01_expressions.01_dicesimulator",
        "peekOfCode": "def roll_dice(numnber_of_times):\n    total = 0\n    for i in range(1,numnber_of_times + 1):\n        random_number = random.randint(1,Num_sides) \n        print(f\"{i}. Die number is : {random_number}\")\n        total += random_number\n    print(f\"Your Total score is :{total}\")\ndef main():\n    while True:\n        try:",
        "detail": "Assignment 00_to_05.01_expressions.01_dicesimulator",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.01_expressions.01_dicesimulator",
        "description": "Assignment 00_to_05.01_expressions.01_dicesimulator",
        "peekOfCode": "def main():\n    while True:\n        try:\n            numbers_of_times = int(input(\"Enter number you want to die roll :\"))\n            if numbers_of_times > 0:\n                roll_dice(numbers_of_times)\n                break\n        except ValueError:\n            print(\"Invalid input.\")\n            continue",
        "detail": "Assignment 00_to_05.01_expressions.01_dicesimulator",
        "documentation": {}
    },
    {
        "label": "Num_sides",
        "kind": 5,
        "importPath": "Assignment 00_to_05.01_expressions.01_dicesimulator",
        "description": "Assignment 00_to_05.01_expressions.01_dicesimulator",
        "peekOfCode": "Num_sides = 6\n# This program is used to show how variable scope works.\ndef roll_dice(numnber_of_times):\n    total = 0\n    for i in range(1,numnber_of_times + 1):\n        random_number = random.randint(1,Num_sides) \n        print(f\"{i}. Die number is : {random_number}\")\n        total += random_number\n    print(f\"Your Total score is :{total}\")\ndef main():",
        "detail": "Assignment 00_to_05.01_expressions.01_dicesimulator",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.01_expressions.02_Energy_calculation",
        "description": "Assignment 00_to_05.01_expressions.02_Energy_calculation",
        "peekOfCode": "def main():\n    c= 299792458 #speed of light in m/s\n    while True:\n        try:\n            mass_in_kg = float(input(\"Enter mass in kilograms: \"))\n            if mass_in_kg <=0:\n                print(\"Invalid input.\")\n                continue\n            else:\n                break",
        "detail": "Assignment 00_to_05.01_expressions.02_Energy_calculation",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.01_expressions.03_feet_to_inches",
        "description": "Assignment 00_to_05.01_expressions.03_feet_to_inches",
        "peekOfCode": "def main():\n    while True:\n        try:\n            feet = float(input(\"Enter the number of feet: \"))\n            if feet > 0:\n                inches = feet * Inches_In_Foot\n                print(f\"{feet} feet is equal to {inches} inches.\")\n                break\n            else:\n                print(\"Invalid input. Please enter a positive number.\")",
        "detail": "Assignment 00_to_05.01_expressions.03_feet_to_inches",
        "documentation": {}
    },
    {
        "label": "Inches_In_Foot",
        "kind": 5,
        "importPath": "Assignment 00_to_05.01_expressions.03_feet_to_inches",
        "description": "Assignment 00_to_05.01_expressions.03_feet_to_inches",
        "peekOfCode": "Inches_In_Foot = 12\ndef main():\n    while True:\n        try:\n            feet = float(input(\"Enter the number of feet: \"))\n            if feet > 0:\n                inches = feet * Inches_In_Foot\n                print(f\"{feet} feet is equal to {inches} inches.\")\n                break\n            else:",
        "detail": "Assignment 00_to_05.01_expressions.03_feet_to_inches",
        "documentation": {}
    },
    {
        "label": "pythagorean_theorem",
        "kind": 2,
        "importPath": "Assignment 00_to_05.01_expressions.04_pythagorean_theorem",
        "description": "Assignment 00_to_05.01_expressions.04_pythagorean_theorem",
        "peekOfCode": "def pythagorean_theorem(a, b):\n    c = math.sqrt(a**2 + b**2)\n    return c\ndef main():\n    while True:\n        try:\n            a = float(input(\"Enter the length of side \\\"AB\\\": \"))\n            b = float(input(\"Enter the length of side \\\"BC\\\": \"))\n            if a > 0 and b > 0:\n                c = pythagorean_theorem(a, b)",
        "detail": "Assignment 00_to_05.01_expressions.04_pythagorean_theorem",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.01_expressions.04_pythagorean_theorem",
        "description": "Assignment 00_to_05.01_expressions.04_pythagorean_theorem",
        "peekOfCode": "def main():\n    while True:\n        try:\n            a = float(input(\"Enter the length of side \\\"AB\\\": \"))\n            b = float(input(\"Enter the length of side \\\"BC\\\": \"))\n            if a > 0 and b > 0:\n                c = pythagorean_theorem(a, b)\n                print(f\"The length of the hypotenuse \\\"AC\\\" is: {c:.2f}\")\n                break\n            else:",
        "detail": "Assignment 00_to_05.01_expressions.04_pythagorean_theorem",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.01_expressions.05_remainder_divison",
        "description": "Assignment 00_to_05.01_expressions.05_remainder_divison",
        "peekOfCode": "def main():\n    while True:\n        try:\n            number1 = int(input(\"Please Enter an integer to be divided: \"))\n            number2 = int(input(\"Please Enter an integer to divide by: \"))\n            if number1 > 0 and number2 > 0:\n                remainder = number1 % number2\n                quotient = number1 // number2\n                print(f\"The remainder when {number1} is divided by {number2} is: {remainder}\")\n                print(f\"The quotient when {number1} is divided by {number2} is: {quotient}\")",
        "detail": "Assignment 00_to_05.01_expressions.05_remainder_divison",
        "documentation": {}
    },
    {
        "label": "roll_dice",
        "kind": 2,
        "importPath": "Assignment 00_to_05.01_expressions.06_rolldice",
        "description": "Assignment 00_to_05.01_expressions.06_rolldice",
        "peekOfCode": "def roll_dice(numnber_of_times):\n    total = 0\n    for i in range(1,numnber_of_times + 1):\n        random_number = random.randint(1,Num_sides) \n        print(f\"{i}. Die number is : {random_number}\")\n        total += random_number\n    print(f\"Your Total score is :{total}\")\ndef main():\n    while True:\n        try:",
        "detail": "Assignment 00_to_05.01_expressions.06_rolldice",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.01_expressions.06_rolldice",
        "description": "Assignment 00_to_05.01_expressions.06_rolldice",
        "peekOfCode": "def main():\n    while True:\n        try:\n            numbers_of_times = int(input(\"Enter number you want to die roll :\"))\n            if numbers_of_times > 0:\n                roll_dice(numbers_of_times)\n                break\n        except ValueError:\n            print(\"Invalid input.\")\n            continue",
        "detail": "Assignment 00_to_05.01_expressions.06_rolldice",
        "documentation": {}
    },
    {
        "label": "Num_sides",
        "kind": 5,
        "importPath": "Assignment 00_to_05.01_expressions.06_rolldice",
        "description": "Assignment 00_to_05.01_expressions.06_rolldice",
        "peekOfCode": "Num_sides = 6\n# This program is used to show how variable scope works.\ndef roll_dice(numnber_of_times):\n    total = 0\n    for i in range(1,numnber_of_times + 1):\n        random_number = random.randint(1,Num_sides) \n        print(f\"{i}. Die number is : {random_number}\")\n        total += random_number\n    print(f\"Your Total score is :{total}\")\ndef main():",
        "detail": "Assignment 00_to_05.01_expressions.06_rolldice",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.01_expressions.07_seconds_in_year_calculator",
        "description": "Assignment 00_to_05.01_expressions.07_seconds_in_year_calculator",
        "peekOfCode": "def main():\n    while True:\n        try:\n            year = int(input(\"Enter a year: \"))\n            if year >=1:\n                seconds_in_year =year * 365 * 24 * 60 * 60\n                print(f\"There are {seconds_in_year} seconds in {year} year.\")\n                break\n            else:\n                print(\"Invalid input. Please enter a year greater than or equal to 1.\")",
        "detail": "Assignment 00_to_05.01_expressions.07_seconds_in_year_calculator",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.01_expressions.08_tiny_mad_lib",
        "description": "Assignment 00_to_05.01_expressions.08_tiny_mad_lib",
        "peekOfCode": "def main():\n    Adjective = str(input(\"Please type an adjective and press enter: \"))\n    Noun = str(input(\"Please type a noun and press enter: \"))\n    Verb = str(input(\"Please type a verb and press enter: \"))\n    print(f\"{sentence_start} {Adjective} {Noun} {Verb}!\")\nif __name__ == \"__main__\":\n    main()",
        "detail": "Assignment 00_to_05.01_expressions.08_tiny_mad_lib",
        "documentation": {}
    },
    {
        "label": "sentence_start",
        "kind": 5,
        "importPath": "Assignment 00_to_05.01_expressions.08_tiny_mad_lib",
        "description": "Assignment 00_to_05.01_expressions.08_tiny_mad_lib",
        "peekOfCode": "sentence_start = \"Panaversity is fun. I learned to program and used Python to make my\"\ndef main():\n    Adjective = str(input(\"Please type an adjective and press enter: \"))\n    Noun = str(input(\"Please type a noun and press enter: \"))\n    Verb = str(input(\"Please type a verb and press enter: \"))\n    print(f\"{sentence_start} {Adjective} {Noun} {Verb}!\")\nif __name__ == \"__main__\":\n    main()",
        "detail": "Assignment 00_to_05.01_expressions.08_tiny_mad_lib",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.02_lists.01_add_many_numbers",
        "description": "Assignment 00_to_05.02_lists.01_add_many_numbers",
        "peekOfCode": "def main():\n    def sum_of_list(list):\n        sum = 0\n        for i in list:\n            sum += i\n        return sum\n    while True:\n        try:\n            lst = input(\"Enter a list of numbers (e.g., 1,2,3): \")\n            lst = [int(i.strip()) for i in lst.split(',')]",
        "detail": "Assignment 00_to_05.02_lists.01_add_many_numbers",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.02_lists.02_double_list",
        "description": "Assignment 00_to_05.02_lists.02_double_list",
        "peekOfCode": "def main():\n    def double_list(list):\n        return [i** 2 for i in list]\n    while True:\n        try:\n            lst = input(\"Enter a list of numbers (e.g., 1,2,3): \")\n            lst = [int(i.strip()) for i in lst.split(',')]\n            break\n        except ValueError:\n            print(\"Invalid input. Please enter a list of numbers.\")",
        "detail": "Assignment 00_to_05.02_lists.02_double_list",
        "documentation": {}
    },
    {
        "label": "EraserApp",
        "kind": 6,
        "importPath": "Assignment 00_to_05.02_lists.03_erase_canvas",
        "description": "Assignment 00_to_05.02_lists.03_erase_canvas",
        "peekOfCode": "class EraserApp:\n    def __init__(self, root):\n        self.root = root\n        self.root.title(\"Eraser Canvas\")\n        # Create canvas\n        self.canvas = tk.Canvas(root, width=CANVAS_WIDTH, height=CANVAS_HEIGHT, bg=\"white\")\n        self.canvas.pack()\n        # Draw a grid of blue squares\n        self.cells = []\n        for row in range(0, CANVAS_HEIGHT, CELL_SIZE):",
        "detail": "Assignment 00_to_05.02_lists.03_erase_canvas",
        "documentation": {}
    },
    {
        "label": "CANVAS_WIDTH",
        "kind": 5,
        "importPath": "Assignment 00_to_05.02_lists.03_erase_canvas",
        "description": "Assignment 00_to_05.02_lists.03_erase_canvas",
        "peekOfCode": "CANVAS_WIDTH = 400\nCANVAS_HEIGHT = 400\nCELL_SIZE = 40\nERASER_SIZE = 10\nclass EraserApp:\n    def __init__(self, root):\n        self.root = root\n        self.root.title(\"Eraser Canvas\")\n        # Create canvas\n        self.canvas = tk.Canvas(root, width=CANVAS_WIDTH, height=CANVAS_HEIGHT, bg=\"white\")",
        "detail": "Assignment 00_to_05.02_lists.03_erase_canvas",
        "documentation": {}
    },
    {
        "label": "CANVAS_HEIGHT",
        "kind": 5,
        "importPath": "Assignment 00_to_05.02_lists.03_erase_canvas",
        "description": "Assignment 00_to_05.02_lists.03_erase_canvas",
        "peekOfCode": "CANVAS_HEIGHT = 400\nCELL_SIZE = 40\nERASER_SIZE = 10\nclass EraserApp:\n    def __init__(self, root):\n        self.root = root\n        self.root.title(\"Eraser Canvas\")\n        # Create canvas\n        self.canvas = tk.Canvas(root, width=CANVAS_WIDTH, height=CANVAS_HEIGHT, bg=\"white\")\n        self.canvas.pack()",
        "detail": "Assignment 00_to_05.02_lists.03_erase_canvas",
        "documentation": {}
    },
    {
        "label": "CELL_SIZE",
        "kind": 5,
        "importPath": "Assignment 00_to_05.02_lists.03_erase_canvas",
        "description": "Assignment 00_to_05.02_lists.03_erase_canvas",
        "peekOfCode": "CELL_SIZE = 40\nERASER_SIZE = 10\nclass EraserApp:\n    def __init__(self, root):\n        self.root = root\n        self.root.title(\"Eraser Canvas\")\n        # Create canvas\n        self.canvas = tk.Canvas(root, width=CANVAS_WIDTH, height=CANVAS_HEIGHT, bg=\"white\")\n        self.canvas.pack()\n        # Draw a grid of blue squares",
        "detail": "Assignment 00_to_05.02_lists.03_erase_canvas",
        "documentation": {}
    },
    {
        "label": "ERASER_SIZE",
        "kind": 5,
        "importPath": "Assignment 00_to_05.02_lists.03_erase_canvas",
        "description": "Assignment 00_to_05.02_lists.03_erase_canvas",
        "peekOfCode": "ERASER_SIZE = 10\nclass EraserApp:\n    def __init__(self, root):\n        self.root = root\n        self.root.title(\"Eraser Canvas\")\n        # Create canvas\n        self.canvas = tk.Canvas(root, width=CANVAS_WIDTH, height=CANVAS_HEIGHT, bg=\"white\")\n        self.canvas.pack()\n        # Draw a grid of blue squares\n        self.cells = []",
        "detail": "Assignment 00_to_05.02_lists.03_erase_canvas",
        "documentation": {}
    },
    {
        "label": "add_three_copies",
        "kind": 2,
        "importPath": "Assignment 00_to_05.02_lists.04_flowing_with_data_structure",
        "description": "Assignment 00_to_05.02_lists.04_flowing_with_data_structure",
        "peekOfCode": "def add_three_copies(my_list, data):\n    for i in range(3):\n        my_list.append(data)\ndef main():\n    message = input(\"Enter a message to copy: \")\n    my_list = []\n    print(\"List before:\", my_list)\n    add_three_copies(my_list, message)\n    print(\"List after:\", my_list)\nif __name__ == \"__main__\":",
        "detail": "Assignment 00_to_05.02_lists.04_flowing_with_data_structure",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.02_lists.04_flowing_with_data_structure",
        "description": "Assignment 00_to_05.02_lists.04_flowing_with_data_structure",
        "peekOfCode": "def main():\n    message = input(\"Enter a message to copy: \")\n    my_list = []\n    print(\"List before:\", my_list)\n    add_three_copies(my_list, message)\n    print(\"List after:\", my_list)\nif __name__ == \"__main__\":\n    main()",
        "detail": "Assignment 00_to_05.02_lists.04_flowing_with_data_structure",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.02_lists.05_get_first_element",
        "description": "Assignment 00_to_05.02_lists.05_get_first_element",
        "peekOfCode": "def main():\n    def get_first_element(lst):\n        return lst[0]\n    def get_lst():\n        lst = []\n        element = input(\"Enter an elemet of the list or type 'stop' to stop: \")\n        while element.lower() != \"stop\":\n            lst.append(element)\n            element = input(\"Enter an elemet of the list or type 'stop' to stop: \")\n        return lst",
        "detail": "Assignment 00_to_05.02_lists.05_get_first_element",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.02_lists.06_get_last_element",
        "description": "Assignment 00_to_05.02_lists.06_get_last_element",
        "peekOfCode": "def main():\n    def get_last_element(lst):\n        return lst[len(lst)-1]\n    def get_lst():\n        lst = []\n        while True:\n            element = input(\"Enter an elemet of the list or type 'stop' to stop : \")\n            if element.lower() == \"stop\":\n                if lst == []:\n                    print(\"list is empty. Enter an element of the list: \")",
        "detail": "Assignment 00_to_05.02_lists.06_get_last_element",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.02_lists.07_get_list",
        "description": "Assignment 00_to_05.02_lists.07_get_list",
        "peekOfCode": "def main():\n    def get_last_element(lst):\n        return lst\n    def get_lst():\n        lst = []\n        while True:\n            element = input(\"Enter a value : \")\n            if element == \"\":\n                break\n            else:",
        "detail": "Assignment 00_to_05.02_lists.07_get_list",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.02_lists.08_shorten",
        "description": "Assignment 00_to_05.02_lists.08_shorten",
        "peekOfCode": "def main():\n    Length_of_list = int(input(\"Please enter the maximum length of the list: \"))\n    def shorten(lst):\n        while len(lst) > Length_of_list:\n            last_elem = lst.pop()\n            print(\"Deleted element:\", last_elem)\n        print(lst)\n# There is no need to edit code beyond this point\n    def get_lst():\n        \"\"\"",
        "detail": "Assignment 00_to_05.02_lists.08_shorten",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.03_if_statements.01_print_events",
        "description": "Assignment 00_to_05.03_if_statements.01_print_events",
        "peekOfCode": "def main():\n    while True:\n        try:\n            numbers = int(input(\"Enter number do you want to print even numbers: \"))\n            if numbers <= 0:\n                print(\"Please enter a number greater than 0.\")\n                continue\n            break\n        except ValueError:\n            print(\"Please enter a valid number.\")",
        "detail": "Assignment 00_to_05.03_if_statements.01_print_events",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.03_if_statements.02_international_voting_age",
        "description": "Assignment 00_to_05.03_if_statements.02_international_voting_age",
        "peekOfCode": "def main():\n    PETURKSBOUIPO_AGE : int = 16\n    STANLAU_AGE : int = 25\n    MAYENGUA_AGE : int = 48\n    while True:\n        try:\n            age = int(input(\"Enter your age: \"))\n            if age < 0:\n                print(\"Please enter a positive number.\")\n                continue",
        "detail": "Assignment 00_to_05.03_if_statements.02_international_voting_age",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.03_if_statements.03_leap_year",
        "description": "Assignment 00_to_05.03_if_statements.03_leap_year",
        "peekOfCode": "def main():\n    while True:\n        try:\n            year = int(input(\"Enter a year: \"))\n            if year <= 0:\n                print(\"Please enter a positive number.\")\n                continue\n            break\n        except ValueError:\n            print(\"Please enter a valid number.\")",
        "detail": "Assignment 00_to_05.03_if_statements.03_leap_year",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.03_if_statements.04_tall_enough_to_ride",
        "description": "Assignment 00_to_05.03_if_statements.04_tall_enough_to_ride",
        "peekOfCode": "def main():\n  while True:\n    try:\n      height  = str(input(\"How tall are you? \"))\n      if height == \"\":\n        print()\n        break\n      if height.isalpha():\n        print(\"Invalid output\")\n        continue",
        "detail": "Assignment 00_to_05.03_if_statements.04_tall_enough_to_ride",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.03_if_statements.05_random_numbers",
        "description": "Assignment 00_to_05.03_if_statements.05_random_numbers",
        "peekOfCode": "def main():\n    while True:\n        try:\n            numbers = int(input(\"Enter number do you want to print random numbers: \"))\n            if numbers <= 0:\n                print(\"Please enter a number greater than 0.\")\n                continue\n            break\n        except ValueError:\n            print(\"Please enter a valid number.\")",
        "detail": "Assignment 00_to_05.03_if_statements.05_random_numbers",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.04_dictionaries.00_count_nums",
        "description": "Assignment 00_to_05.04_dictionaries.00_count_nums",
        "peekOfCode": "def main():\n    memory = {}\n    while True:\n        user_input = input(\"Enter a number or enter nothing to stop: \")\n        if user_input == \"\":\n            break\n        if user_input in memory:\n            memory[user_input] += 1\n        else:\n            memory[user_input] = 1",
        "detail": "Assignment 00_to_05.04_dictionaries.00_count_nums",
        "documentation": {}
    },
    {
        "label": "read_phone_numbers",
        "kind": 2,
        "importPath": "Assignment 00_to_05.04_dictionaries.01_phone_books",
        "description": "Assignment 00_to_05.04_dictionaries.01_phone_books",
        "peekOfCode": "def read_phone_numbers():\n    phonebook = {}  # Create empty phonebook\n    while True:\n        name = input(\"Enter a Name to add: \")\n        if name == \"\":\n            break\n        number = input(\"Enter a Number to add: \")\n        phonebook[name.lower()] = number\n    return phonebook\ndef print_phonebook(phonebook):",
        "detail": "Assignment 00_to_05.04_dictionaries.01_phone_books",
        "documentation": {}
    },
    {
        "label": "print_phonebook",
        "kind": 2,
        "importPath": "Assignment 00_to_05.04_dictionaries.01_phone_books",
        "description": "Assignment 00_to_05.04_dictionaries.01_phone_books",
        "peekOfCode": "def print_phonebook(phonebook):\n    for name in phonebook:\n        print(str(name) + \" -> \" + str(phonebook[name]))\ndef lookup_numbers(phonebook):\n    while True:\n        name = input(\"Enter name to lookup: \")\n        if name == \"\":\n            break\n        if name.lower() not in phonebook:\n            print(name + \" is not in the phonebook\")",
        "detail": "Assignment 00_to_05.04_dictionaries.01_phone_books",
        "documentation": {}
    },
    {
        "label": "lookup_numbers",
        "kind": 2,
        "importPath": "Assignment 00_to_05.04_dictionaries.01_phone_books",
        "description": "Assignment 00_to_05.04_dictionaries.01_phone_books",
        "peekOfCode": "def lookup_numbers(phonebook):\n    while True:\n        name = input(\"Enter name to lookup: \")\n        if name == \"\":\n            break\n        if name.lower() not in phonebook:\n            print(name + \" is not in the phonebook\")\n        else:\n            print(phonebook[name])\ndef main():",
        "detail": "Assignment 00_to_05.04_dictionaries.01_phone_books",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.04_dictionaries.01_phone_books",
        "description": "Assignment 00_to_05.04_dictionaries.01_phone_books",
        "peekOfCode": "def main():\n    phonebook = read_phone_numbers()\n    print_phonebook(phonebook)\n    lookup_numbers(phonebook)\n# Python boilerplate.\nif __name__ == \"__main__\":\n    main()",
        "detail": "Assignment 00_to_05.04_dictionaries.01_phone_books",
        "documentation": {}
    },
    {
        "label": "menu",
        "kind": 5,
        "importPath": "Assignment 00_to_05.04_dictionaries.02_pop_up_shop",
        "description": "Assignment 00_to_05.04_dictionaries.02_pop_up_shop",
        "peekOfCode": "menu = {\n    'B': ('Burger', 200),\n    'F': ('French Fries', 50),\n    'P': ('Pizza', 500),\n    'S': ('Sandwiches', 150)\n}\n# Initialize the total charge\ntotal_charge = 0\n# Display the menu\nprint(\"Menu:\")",
        "detail": "Assignment 00_to_05.04_dictionaries.02_pop_up_shop",
        "documentation": {}
    },
    {
        "label": "total_charge",
        "kind": 5,
        "importPath": "Assignment 00_to_05.04_dictionaries.02_pop_up_shop",
        "description": "Assignment 00_to_05.04_dictionaries.02_pop_up_shop",
        "peekOfCode": "total_charge = 0\n# Display the menu\nprint(\"Menu:\")\nfor item_code, (item_name, price) in menu.items():\n    print(f\"{item_code} - {item_name} (Rs. {price})\")\n# Take orders from the customer\nwhile True:\n    food_type = input(\"Enter the food type (B/F/P/S) or 'Q' to quit: \").upper()\n    # Check if the customer wants to quit\n    if food_type == 'Q':",
        "detail": "Assignment 00_to_05.04_dictionaries.02_pop_up_shop",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "Assignment 00_to_05.04_dictionaries.03_powerful_passwords",
        "description": "Assignment 00_to_05.04_dictionaries.03_powerful_passwords",
        "peekOfCode": "def login(email, stored_logins, password_to_check):\n    \"\"\"\n    Returns True if the hash of the password we are checking matches the one in stored_logins\n    for a specific email. Otherwise, returns False.\n    email: the email we are checking the password for\n    stored_logins: a dictionary pointing from an email to its hashed password\n    password_to_check: a password we want to test alongside the email to login with\n    \"\"\"\n    if stored_logins[email] == hash_password(password_to_check):\n        return True",
        "detail": "Assignment 00_to_05.04_dictionaries.03_powerful_passwords",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "kind": 2,
        "importPath": "Assignment 00_to_05.04_dictionaries.03_powerful_passwords",
        "description": "Assignment 00_to_05.04_dictionaries.03_powerful_passwords",
        "peekOfCode": "def hash_password(password):\n    \"\"\"\n    Takes in a password and returns the SHA256 hashed value for that specific password.\n    Inputs:\n        password: the password we want\n    Outputs:\n        the hashed form of the input password\n    \"\"\"\n    return sha256(password.encode()).hexdigest()\ndef main():",
        "detail": "Assignment 00_to_05.04_dictionaries.03_powerful_passwords",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.04_dictionaries.03_powerful_passwords",
        "description": "Assignment 00_to_05.04_dictionaries.03_powerful_passwords",
        "peekOfCode": "def main():\n    # stored_logins is a dictionary with emails as keys and hashed passwords as values\n    stored_logins = {\n        \"example@gmail.com\": \"5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8\",\n        \"code_in_placer@cip.org\": \"973607a4ae7b4cf7d96a100b0fb07e8519cc4f70441d41214a9f811577bb06cc\",\n        \"student@stanford.edu\": \"882c6df720fd99f5eebb1581a1cf975625cea8a160283011c0b9512bb56c95fb\"\n    }\n    print(login(\"example@gmail.com\", stored_logins, \"word\"))\n    print(login(\"example@gmail.com\", stored_logins, \"password\"))\n    print(login(\"code_in_placer@cip.org\", stored_logins, \"Karel\"))",
        "detail": "Assignment 00_to_05.04_dictionaries.03_powerful_passwords",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.05_Loops_control_flow.00_guess_my_number",
        "description": "Assignment 00_to_05.05_Loops_control_flow.00_guess_my_number",
        "peekOfCode": "def main():\n    my_number = random.randint(1, 99)\n    while True:\n        try:\n            guess = int(input(\"I am thinking a number between 0 and 99... Enter a guess: \"))\n            break\n        except ValueError:\n            print(\"Enter a valid number\")\n            continue\n    while True:",
        "detail": "Assignment 00_to_05.05_Loops_control_flow.00_guess_my_number",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.05_Loops_control_flow.01_fibonacci_series",
        "description": "Assignment 00_to_05.05_Loops_control_flow.01_fibonacci_series",
        "peekOfCode": "def main():\n    lst = []\n    curr_term = 0  # The 0th Fibonacci Number\n    next_term = 1  # The 1st Fibonacci Number\n    while len(lst) <= (VALUE-1):\n        lst.append(curr_term)\n        term_after_next = curr_term + next_term\n        curr_term = next_term\n        next_term = term_after_next\n    print(\"The Fibonacci Series is: \", lst)",
        "detail": "Assignment 00_to_05.05_Loops_control_flow.01_fibonacci_series",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.05_Loops_control_flow.02_print_events",
        "description": "Assignment 00_to_05.05_Loops_control_flow.02_print_events",
        "peekOfCode": "def main():\n    while True:\n        try:\n            numbers = int(input(\"Enter number do you want to print even numbers: \"))\n            if numbers <= 0:\n                print(\"Please enter a number greater than 0.\")\n                continue\n            break\n        except ValueError:\n            print(\"Please enter a valid number.\")",
        "detail": "Assignment 00_to_05.05_Loops_control_flow.02_print_events",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.05_Loops_control_flow.03_wholesome_machine",
        "description": "Assignment 00_to_05.05_Loops_control_flow.03_wholesome_machine",
        "peekOfCode": "def main():\n    Affirmation = \"I am capable of doing anything I put my mind to.\"\n    print(\"The affirmation is: \\n\"+Affirmation)\n    while True:\n        user_input = input(\"Please type the following affirmation: \")\n        if user_input == Affirmation:\n            print(\"Thanks for the affirmation.\")\n            break\n        else:\n            print(\"That was not the affirmation. \")",
        "detail": "Assignment 00_to_05.05_Loops_control_flow.03_wholesome_machine",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.05_Loops_control_flow.04_liftoff",
        "description": "Assignment 00_to_05.05_Loops_control_flow.04_liftoff",
        "peekOfCode": "def main():\n    for i in range(10, 0, -1):\n        print(i,end=' ')\n    print(\"Liftoff!\")\nif __name__ == \"__main__\": \n    main()",
        "detail": "Assignment 00_to_05.05_Loops_control_flow.04_liftoff",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.05_Loops_control_flow.05_double_it",
        "description": "Assignment 00_to_05.05_Loops_control_flow.05_double_it",
        "peekOfCode": "def main():\n    while True:\n        try:\n            num = int(input(\"Enter a number: \"))\n            if num >= 100 or num < 0:\n                print(\"The number is must be in between 0 and 100.\")\n                continue\n            break\n        except ValueError:\n            print(\"Enter a valid number.\")",
        "detail": "Assignment 00_to_05.05_Loops_control_flow.05_double_it",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.06_functions.00_averages",
        "description": "Assignment 00_to_05.06_functions.00_averages",
        "peekOfCode": "def main():\n  while True:\n    try:\n      num1 = float(input(\"Enter first number: \"))\n      num2 = float(input(\"Enter Second number: \"))\n      break\n    except ValueError:\n     print(\"Please enter valid number.\")\n     continue\n  Average = (num1 + num2) / 2",
        "detail": "Assignment 00_to_05.06_functions.00_averages",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.06_functions.01_count_even",
        "description": "Assignment 00_to_05.06_functions.01_count_even",
        "peekOfCode": "def main():\n  lst = []\n  even_number = 0\n  odd_number = 0\n  while True:\n      number = input(\"Enter an integer or press enter to stop: \")\n      if number == \"\":\n        break\n      if number.isalpha() or int(number) < 0:\n        print(\"Please enter valid or positve number.\")",
        "detail": "Assignment 00_to_05.06_functions.01_count_even",
        "documentation": {}
    },
    {
        "label": "chaotic_counting",
        "kind": 2,
        "importPath": "Assignment 00_to_05.06_functions.02_chaotic_counting",
        "description": "Assignment 00_to_05.06_functions.02_chaotic_counting",
        "peekOfCode": "def chaotic_counting():\n    for i in range(10):\n        curr_num = i + 1\n        if done():\n            return # this ends the function execution, so we'll get back to the main() function!\n        print(curr_num)\n# There is no need to edit code beyond this point\ndef done():\n    DONE_LIKELIHOOD = 0.2\n    \"\"\" Returns True with a probability of DONE_LIKELIHOOD \"\"\"",
        "detail": "Assignment 00_to_05.06_functions.02_chaotic_counting",
        "documentation": {}
    },
    {
        "label": "done",
        "kind": 2,
        "importPath": "Assignment 00_to_05.06_functions.02_chaotic_counting",
        "description": "Assignment 00_to_05.06_functions.02_chaotic_counting",
        "peekOfCode": "def done():\n    DONE_LIKELIHOOD = 0.2\n    \"\"\" Returns True with a probability of DONE_LIKELIHOOD \"\"\"\n    if random.random() < DONE_LIKELIHOOD:\n        return True\n    return False\ndef main():\n    print(\"I'm going to count until 10 or until I feel like stopping, whichever comes first.\")\n    chaotic_counting()\n    print(\"I'm done\")",
        "detail": "Assignment 00_to_05.06_functions.02_chaotic_counting",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.06_functions.02_chaotic_counting",
        "description": "Assignment 00_to_05.06_functions.02_chaotic_counting",
        "peekOfCode": "def main():\n    print(\"I'm going to count until 10 or until I feel like stopping, whichever comes first.\")\n    chaotic_counting()\n    print(\"I'm done\")\nif __name__ == \"__main__\":\n    main()",
        "detail": "Assignment 00_to_05.06_functions.02_chaotic_counting",
        "documentation": {}
    },
    {
        "label": "double",
        "kind": 2,
        "importPath": "Assignment 00_to_05.06_functions.04_double",
        "description": "Assignment 00_to_05.06_functions.04_double",
        "peekOfCode": "def double(num: int):\n  return num * 2\n# There is no need to edit code beyond this point\ndef main():\n  while True:\n    print(\"This program doubles the number you enter.\")\n    try:\n      num = int(input(\"Enter a number: \"))\n      num_times_2 = double(num)\n    except ValueError:",
        "detail": "Assignment 00_to_05.06_functions.04_double",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.06_functions.04_double",
        "description": "Assignment 00_to_05.06_functions.04_double",
        "peekOfCode": "def main():\n  while True:\n    print(\"This program doubles the number you enter.\")\n    try:\n      num = int(input(\"Enter a number: \"))\n      num_times_2 = double(num)\n    except ValueError:\n      print(\"Please enter valid number.\")\n      continue\n    print(\"Double that is\", num_times_2)",
        "detail": "Assignment 00_to_05.06_functions.04_double",
        "documentation": {}
    },
    {
        "label": "get_name",
        "kind": 2,
        "importPath": "Assignment 00_to_05.06_functions.05_get_name",
        "description": "Assignment 00_to_05.06_functions.05_get_name",
        "peekOfCode": "def get_name():\n    return input(\"What is your name? \")\n# There is no need to edit code beyond this point\ndef main():\n    name = get_name() # get_name() will return a string which we store to the 'name' variable here\n    print(\"Howdy\", name, \"! 🤠\")\nif __name__ == '__main__':\n    main()",
        "detail": "Assignment 00_to_05.06_functions.05_get_name",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.06_functions.05_get_name",
        "description": "Assignment 00_to_05.06_functions.05_get_name",
        "peekOfCode": "def main():\n    name = get_name() # get_name() will return a string which we store to the 'name' variable here\n    print(\"Howdy\", name, \"! 🤠\")\nif __name__ == '__main__':\n    main()",
        "detail": "Assignment 00_to_05.06_functions.05_get_name",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.06_functions.06_is_odd",
        "description": "Assignment 00_to_05.06_functions.06_is_odd",
        "peekOfCode": "def main():\n  lst = []\n  even_number = 0\n  odd_number = 0\n  while True:\n      number = input(\"Enter an integer or press enter to stop: \")\n      if number == \"\":\n        break\n      if number.isalpha() or int(number) < 0:\n        print(\"Please enter valid or positve number.\")",
        "detail": "Assignment 00_to_05.06_functions.06_is_odd",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.06_functions.07_print_divisor",
        "description": "Assignment 00_to_05.06_functions.07_print_divisor",
        "peekOfCode": "def main():\n  while True:\n    try:\n      User_input = int(input(\"Enter a number: \"))\n      if User_input > 0:\n        break\n      else:\n        print(\"Please enter positive number.\")\n        continue\n    except ValueError:",
        "detail": "Assignment 00_to_05.06_functions.07_print_divisor",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.06_functions.08_print_multiple",
        "description": "Assignment 00_to_05.06_functions.08_print_multiple",
        "peekOfCode": "def main():\n  string = str(input(\"Please type a message: \"))\n  while True:\n    try:\n      number = int(input(\"Enter a number of times to repeat your message: \"))\n      if number <= 0:\n         print(\"Please enter positive number.\")\n      break\n    except ValueError:\n      print(\"Please enter valid number.\")",
        "detail": "Assignment 00_to_05.06_functions.08_print_multiple",
        "documentation": {}
    },
    {
        "label": "make_sentence",
        "kind": 2,
        "importPath": "Assignment 00_to_05.06_functions.09_sentence_generator",
        "description": "Assignment 00_to_05.06_functions.09_sentence_generator",
        "peekOfCode": "def make_sentence(word, part_of_speech):\n    if part_of_speech == 0:\n        # noun\n        print(\"I am excited to add this \" + word + \" to my vast collection of them!\")\n    elif part_of_speech == 1:\n        # verb\n        print(\"It's so nice outside today it makes me want to \" + word + \"!\")\n    elif part_of_speech == 2:\n        # adjective\n        print(\"Looking out my window, the sky is big and \" + word + \"!\")",
        "detail": "Assignment 00_to_05.06_functions.09_sentence_generator",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.06_functions.09_sentence_generator",
        "description": "Assignment 00_to_05.06_functions.09_sentence_generator",
        "peekOfCode": "def main():\n    word :  str = input(\"Please type a noun, verb, or adjective: \")\n    print(\"Is this a noun, verb, or adjective?\")\n    part_of_speech = int(input(\"Type 0 for noun, 1 for verb, 2 for adjective: \"))\n    make_sentence(word, part_of_speech)\nif __name__ == '__main__':\n    main()",
        "detail": "Assignment 00_to_05.06_functions.09_sentence_generator",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.06_functions.10_print_ones_digit",
        "description": "Assignment 00_to_05.06_functions.10_print_ones_digit",
        "peekOfCode": "def main():\n  while True:\n    try:\n        User_input = int(input(\"Enter a number: \"))\n        print(\"The ones digit is :\",User_input % 10)\n        break\n    except ValueError:\n      print(\"Please enter valid number.\")\n      continue\nif __name__ == \"__main__\" :",
        "detail": "Assignment 00_to_05.06_functions.10_print_ones_digit",
        "documentation": {}
    },
    {
        "label": "is_adult",
        "kind": 2,
        "importPath": "Assignment 00_to_05.07_information_flow.00_choosing_returns",
        "description": "Assignment 00_to_05.07_information_flow.00_choosing_returns",
        "peekOfCode": "def is_adult(age):\n    if age >= 18:\n        return True\n    else:\n        return False\ndef main():\n    while True:\n        try:\n            age = int(input(\"Enter your age: \"))\n            if is_adult(age):",
        "detail": "Assignment 00_to_05.07_information_flow.00_choosing_returns",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.07_information_flow.00_choosing_returns",
        "description": "Assignment 00_to_05.07_information_flow.00_choosing_returns",
        "peekOfCode": "def main():\n    while True:\n        try:\n            age = int(input(\"Enter your age: \"))\n            if is_adult(age):\n                print(\"You are an adult.\")\n            else:\n                print(\"You are not an adult.\")\n            break\n        except ValueError:",
        "detail": "Assignment 00_to_05.07_information_flow.00_choosing_returns",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.07_information_flow.01_greetings",
        "description": "Assignment 00_to_05.07_information_flow.01_greetings",
        "peekOfCode": "def main():\n    name : str = input(\"What's your name? \")\n    print(greet(name))\n# There is no need to edit code beyond this point\ndef greet(name):\n    return \"Greetings \" + name + \"!\"\nif __name__ == '__main__':\n    main()",
        "detail": "Assignment 00_to_05.07_information_flow.01_greetings",
        "documentation": {}
    },
    {
        "label": "greet",
        "kind": 2,
        "importPath": "Assignment 00_to_05.07_information_flow.01_greetings",
        "description": "Assignment 00_to_05.07_information_flow.01_greetings",
        "peekOfCode": "def greet(name):\n    return \"Greetings \" + name + \"!\"\nif __name__ == '__main__':\n    main()",
        "detail": "Assignment 00_to_05.07_information_flow.01_greetings",
        "documentation": {}
    },
    {
        "label": "in_range",
        "kind": 2,
        "importPath": "Assignment 00_to_05.07_information_flow.02_in_range",
        "description": "Assignment 00_to_05.07_information_flow.02_in_range",
        "peekOfCode": "def in_range(n, low, high):\n    if n >= low and n <= high:\n        return True\n    else:\n        return False\ndef main():\n    while True:\n        try:\n            n = int(input(\"Enter a number: \"))\n            low = int(input(\"Enter a low number: \"))",
        "detail": "Assignment 00_to_05.07_information_flow.02_in_range",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.07_information_flow.02_in_range",
        "description": "Assignment 00_to_05.07_information_flow.02_in_range",
        "peekOfCode": "def main():\n    while True:\n        try:\n            n = int(input(\"Enter a number: \"))\n            low = int(input(\"Enter a low number: \"))\n            high = int(input(\"Enter a high number: \"))\n            print(in_range(n, low, high))\n            break\n        except ValueError:\n            print(\"Invalid input. Please enter a valid integer.\")",
        "detail": "Assignment 00_to_05.07_information_flow.02_in_range",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.07_information_flow.03_in_stock",
        "description": "Assignment 00_to_05.07_information_flow.03_in_stock",
        "peekOfCode": "def main():\n\tfruit : str = input(\"Enter a fruit: \")\n\tstock = num_in_stock(fruit)\n\tif stock == 0:\n\t\tprint(\"This fruit is not in stock.\")\n\telse:\n\t\tprint(\"This fruit is in stock! Here is how many:\" + str(stock))\ndef num_in_stock(fruit):\n\tif fruit == 'apple':\n\t\treturn 2",
        "detail": "Assignment 00_to_05.07_information_flow.03_in_stock",
        "documentation": {}
    },
    {
        "label": "num_in_stock",
        "kind": 2,
        "importPath": "Assignment 00_to_05.07_information_flow.03_in_stock",
        "description": "Assignment 00_to_05.07_information_flow.03_in_stock",
        "peekOfCode": "def num_in_stock(fruit):\n\tif fruit == 'apple':\n\t\treturn 2\n\tif fruit == 'durian':\n\t\treturn 4\n\tif fruit == 'pear':\n\t\treturn 1000\n\tif fruit == 'banana':\n\t\treturn 6\n\tif fruit == 'kiwi':",
        "detail": "Assignment 00_to_05.07_information_flow.03_in_stock",
        "documentation": {}
    },
    {
        "label": "\tstock",
        "kind": 5,
        "importPath": "Assignment 00_to_05.07_information_flow.03_in_stock",
        "description": "Assignment 00_to_05.07_information_flow.03_in_stock",
        "peekOfCode": "\tstock = num_in_stock(fruit)\n\tif stock == 0:\n\t\tprint(\"This fruit is not in stock.\")\n\telse:\n\t\tprint(\"This fruit is in stock! Here is how many:\" + str(stock))\ndef num_in_stock(fruit):\n\tif fruit == 'apple':\n\t\treturn 2\n\tif fruit == 'durian':\n\t\treturn 4",
        "detail": "Assignment 00_to_05.07_information_flow.03_in_stock",
        "documentation": {}
    },
    {
        "label": "get_user_info",
        "kind": 2,
        "importPath": "Assignment 00_to_05.07_information_flow.04_multiple_returns",
        "description": "Assignment 00_to_05.07_information_flow.04_multiple_returns",
        "peekOfCode": "def get_user_info():\n    first_name = str(input(\"What is your first name?: \"))\n    last_name = str(input(\"What is your last name?: \"))\n    email_address = str(input(\"What is your email address?: \"))\n    return first_name, last_name, email_address\n########## No need to edit code past this point :) ##########\ndef main():\n    user_data = get_user_info()\n    print(\"Received the following user data:\", user_data)\nif __name__ == \"__main__\":",
        "detail": "Assignment 00_to_05.07_information_flow.04_multiple_returns",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.07_information_flow.04_multiple_returns",
        "description": "Assignment 00_to_05.07_information_flow.04_multiple_returns",
        "peekOfCode": "def main():\n    user_data = get_user_info()\n    print(\"Received the following user data:\", user_data)\nif __name__ == \"__main__\":\n     main()",
        "detail": "Assignment 00_to_05.07_information_flow.04_multiple_returns",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignment 00_to_05.07_information_flow.05_subtract_7",
        "description": "Assignment 00_to_05.07_information_flow.05_subtract_7",
        "peekOfCode": "def main():\n    while True:\n        try:\n            num = int(input(\"Enter a number: \"))\n            print(\"The output after subtracting 7:\",num - 7)\n            break\n        except ValueError:\n            print(\"Invalid input. Please enter a valid integer.\")\nif __name__ == \"__main__\":\n    main()",
        "detail": "Assignment 00_to_05.07_information_flow.05_subtract_7",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignments 01.01_basics.00_joke_boat",
        "description": "Assignments 01.01_basics.00_joke_boat",
        "peekOfCode": "def main():\n    while True:\n        User_input = input(\"What do you want? \").strip().lower()\n        if \"joke\" in User_input :\n            print( 'Here is a joke for you! Panaversity GPT - Sophia is heading out to the grocery store. A programmer tells her: get a liter of milk, and if they have eggs, get 12. Sophia returns with 13 liters of milk. The programmer asks why and Sophia replies: \\'because they had eggs\\'')\n            break\n        else:\n            print(\"No joke for you, Sorry I only tell jokes.\")\n            continue\nif __name__ == \"__main__\": ",
        "detail": "Assignments 01.01_basics.00_joke_boat",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignments 01.01_basics.01_double_it",
        "description": "Assignments 01.01_basics.01_double_it",
        "peekOfCode": "def main():\n    while True:\n        try:\n            num = int(input(\"Enter a number: \"))\n            if num >= 100 or num < 0:\n                print(\"The number is must be in between 0 and 100.\")\n                continue\n            break\n        except ValueError:\n            print(\"Enter a valid number.\")",
        "detail": "Assignments 01.01_basics.01_double_it",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignments 01.01_basics.02_liftoff",
        "description": "Assignments 01.01_basics.02_liftoff",
        "peekOfCode": "def main():\n    for i in range(10, 0, -1):\n        print(i,end=' ')\n    print(\"Liftoff!\")\nif __name__ == \"__main__\": \n    main()",
        "detail": "Assignments 01.01_basics.02_liftoff",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignments 01.01_basics.03_guess_my_number",
        "description": "Assignments 01.01_basics.03_guess_my_number",
        "peekOfCode": "def main():\n    my_number = random.randint(1, 99)\n    while True:\n        try:\n            guess = int(input(\"I am thinking a number between 0 and 99... Enter a guess: \"))\n            break\n        except ValueError:\n            print(\"Enter a valid number\")\n            continue\n    while True:",
        "detail": "Assignments 01.01_basics.03_guess_my_number",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignments 01.01_basics.04_random_numbers",
        "description": "Assignments 01.01_basics.04_random_numbers",
        "peekOfCode": "def main():\n    while True:\n        try:\n            num = int(input(\"Enter a number: \"))\n            break\n        except ValueError:\n            print(\"Enter a valid number.\")\n            continue\n    lst = []\n    for i in range(num):",
        "detail": "Assignments 01.01_basics.04_random_numbers",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignments 01.02_intermidiate.Control flow for console.handout",
        "description": "Assignments 01.02_intermidiate.Control flow for console.handout",
        "peekOfCode": "def main():\n    score = 0\n    print(\"Welcome to the High-Low Game!\")\n    print(\"--------------------------------\")\n    for i in range(1,6):\n        print(f\"Round {i}:\")\n        while True:\n            try:\n                user_input = int(input(\"Your number is: \"))\n                break",
        "detail": "Assignments 01.02_intermidiate.Control flow for console.handout",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignments 01.02_intermidiate.Intro to python.handout",
        "description": "Assignments 01.02_intermidiate.Intro to python.handout",
        "peekOfCode": "def main():\n    while True:\n        try:\n            weight_on_earth = float(input(\"Enter a weight on earth: \"))\n            break\n        except ValueError:\n            print(\"Enter a valid number.\")\n            continue\n    weight_on_mars = weight_on_earth * 0.378\n    weight_on_jupiter = weight_on_earth * 2.36",
        "detail": "Assignments 01.02_intermidiate.Intro to python.handout",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Assignments 01.02_intermidiate.Lists and Dicts.handout",
        "description": "Assignments 01.02_intermidiate.Lists and Dicts.handout",
        "peekOfCode": "def main():\n    list1 = [\"apple\", \"banana\", \"orange\", \"grape\" ,\"pineapple\"]\n    print(list1)\n    print(\"Add mango to the list\")\n    list1.append(\"mango\")\n    print(list1)\n    print(\"lenght of list\", len(list1))\n    print(\"----Accessing elements----\")\n    while True:\n        try:",
        "detail": "Assignments 01.02_intermidiate.Lists and Dicts.handout",
        "documentation": {}
    },
    {
        "label": "madlibs",
        "kind": 2,
        "importPath": "Assignments 1 to 6.01_madlibs",
        "description": "Assignments 1 to 6.01_madlibs",
        "peekOfCode": "def madlibs():\n    Adjective = input(\"Enter an Adjective: \")\n    Verb = input(\"Enter a Verb: \")\n    Noun = input(\"Enter a Noun: \")\n    Adjective2 = input(\"Enter another Adjective: \")\n    Noun2 = input(\"Enter another Noun: \")\n    Story = f\"One sunny day, a {Adjective} squirrel decided to {Verb} up the tallest {Noun} \\\nin the forest. As it climbed, it noticed a {Adjective2} cloud shaped like a {Noun2} \\\nthat was floating in the sky. The squirrel couldn’t believe its eyes and started \\\nto chattering excitedly. Suddenly, a gust of wind blew, and the squirrel had to hold \\",
        "detail": "Assignments 1 to 6.01_madlibs",
        "documentation": {}
    },
    {
        "label": "play",
        "kind": 2,
        "importPath": "Assignments 1 to 6.02_guess_the_number_computer",
        "description": "Assignments 1 to 6.02_guess_the_number_computer",
        "peekOfCode": "def play():\n    count = 0\n    my_number = random.randint(1, 99)\n    while True:\n        try:\n            guess = int(input(\"I am thinking a number between 0 and 99... Enter a guess: \"))\n            break\n        except ValueError:\n            print(\"Enter a valid number\")\n            continue",
        "detail": "Assignments 1 to 6.02_guess_the_number_computer",
        "documentation": {}
    },
    {
        "label": "play",
        "kind": 2,
        "importPath": "Assignments 1 to 6.03_guess_the number_user",
        "description": "Assignments 1 to 6.03_guess_the number_user",
        "peekOfCode": "def play():\n    count = 0\n    while True:\n        try:\n            user_number = int(input(\"Enter a number b/w 1 and 100: \"))\n            if user_number < 1 or user_number > 100:\n                print(\"Enter a number between 1 and 100\")\n                continue\n            break\n        except ValueError:",
        "detail": "Assignments 1 to 6.03_guess_the number_user",
        "documentation": {}
    },
    {
        "label": "play",
        "kind": 2,
        "importPath": "Assignments 1 to 6.04_rock_paper_scissors",
        "description": "Assignments 1 to 6.04_rock_paper_scissors",
        "peekOfCode": "def play():\n    import random\n    Computer_guess=random.choice([\"r\",\"p\",\"s\"])\n    while True:\n        user_choice=input(\"Enter your choice \\\"r\\\" for rock, \\\"p\\\" for paper and \\\"s\\\" for scissor: \")\n        if user_choice not in [\"r\",\"p\",\"s\"]:\n            print(\"Enter a valid choice\")\n            continue\n        if user_choice==Computer_guess:\n            print(\"Tie! Both chose: \",user_choice)",
        "detail": "Assignments 1 to 6.04_rock_paper_scissors",
        "documentation": {}
    },
    {
        "label": "hangman_game",
        "kind": 2,
        "importPath": "Assignments 1 to 6.05_hangman",
        "description": "Assignments 1 to 6.05_hangman",
        "peekOfCode": "def hangman_game():\n    words = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"honeydew\", \"kiwi\", \"lemon\", \"mango\",\n             \"nectarine\", \"orange\", \"peach\", \"quince\", \"raspberry\", \"strawberry\", \"tangerine\", \"watermelon\", \"yuzu\"]\n    word = random.choice(words)  # Select a random word\n    guessed_letters = []\n    attempts = 6  # Number of attempts\n    while attempts > 0:\n        # Display the word with guessed letters\n        display_word = \" \".join([letter if letter in guessed_letters else \"_\" for letter in word])\n        print(\"\\nGuess the word:\", display_word)",
        "detail": "Assignments 1 to 6.05_hangman",
        "documentation": {}
    },
    {
        "label": "countdown",
        "kind": 2,
        "importPath": "Assignments 1 to 6.06_Countdown_timer",
        "description": "Assignments 1 to 6.06_Countdown_timer",
        "peekOfCode": "def countdown():\n    while True:\n        try:\n            user_input = int(input(\"Enter the countdown time in seconds: \"))\n            if user_input <= 0:\n                print(\"⚠️ Please enter a positive number!\")\n                continue\n            break\n        except ValueError:\n            print(\"⚠️ Invalid input! Please enter a valid number.\")",
        "detail": "Assignments 1 to 6.06_Countdown_timer",
        "documentation": {}
    },
    {
        "label": "password_generator",
        "kind": 2,
        "importPath": "Assignments 1 to 6.07_Password_Generator",
        "description": "Assignments 1 to 6.07_Password_Generator",
        "peekOfCode": "def password_generator():\n    while True:\n        try:\n            passwords = int(input(\"Enter the number of passwords you want to generate: \"))\n            if passwords <= 0:\n                print(\"Please enter a positive number!\")\n                continue\n            length = int(input(\"Enter the length of each password: \"))\n            if length <= 0:\n                print(\"Password length must be greater than 0!\")",
        "detail": "Assignments 1 to 6.07_Password_Generator",
        "documentation": {}
    },
    {
        "label": "height",
        "kind": 5,
        "importPath": "Assignments 1 to 6.08_BMI_Calculator",
        "description": "Assignments 1 to 6.08_BMI_Calculator",
        "peekOfCode": "height = st.slider(\"Enter your height (cm)\", min_value=50, max_value=300, value=170)\nweight = st.slider(\"Enter your weight (kg)\", min_value=10, max_value=300, value=70)\n# Button to calculate BMI\nif st.button(\"Calculate BMI\"):\n    if height == 0:  # Prevent division by zero\n        st.error(\"⚠️ Height cannot be zero! Please enter a valid height.\")\n    elif weight == 0:\n        st.error(\"⚠️ Weight cannot be zero! Please enter a valid weight.\")\n    else:\n        bmi = weight / ((height / 100) ** 2)",
        "detail": "Assignments 1 to 6.08_BMI_Calculator",
        "documentation": {}
    },
    {
        "label": "weight",
        "kind": 5,
        "importPath": "Assignments 1 to 6.08_BMI_Calculator",
        "description": "Assignments 1 to 6.08_BMI_Calculator",
        "peekOfCode": "weight = st.slider(\"Enter your weight (kg)\", min_value=10, max_value=300, value=70)\n# Button to calculate BMI\nif st.button(\"Calculate BMI\"):\n    if height == 0:  # Prevent division by zero\n        st.error(\"⚠️ Height cannot be zero! Please enter a valid height.\")\n    elif weight == 0:\n        st.error(\"⚠️ Weight cannot be zero! Please enter a valid weight.\")\n    else:\n        bmi = weight / ((height / 100) ** 2)\n        st.success(f\"📊 Your BMI is: **{bmi:.2f}**\")",
        "detail": "Assignments 1 to 6.08_BMI_Calculator",
        "documentation": {}
    },
    {
        "label": "uploaded_file",
        "kind": 5,
        "importPath": "Assignments 1 to 6.main",
        "description": "Assignments 1 to 6.main",
        "peekOfCode": "uploaded_file = st.file_uploader(\"Choose a CSV file\", type=\"csv\")\nif uploaded_file is not None:\n    df = pd.read_csv(uploaded_file)\n    st.subheader(\"Data Preview\")\n    st.write(df.head())\n    st.subheader(\"Data Summary\")\n    st.write(df.describe())\n    st.subheader(\"Filter Data\")\n    columns = df.columns.tolist()\n    selected_column = st.selectbox(\"Select column to filter by\", columns)",
        "detail": "Assignments 1 to 6.main",
        "documentation": {}
    }
]